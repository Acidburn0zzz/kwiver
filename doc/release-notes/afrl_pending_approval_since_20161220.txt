KWIVER Release Notes for changes pending release approval by AFRL
=================================================================

This file documents release notes for changes made to KWIVER which require
public release approval from AFRL.  After approval, the changes and
corresponding notes below will be incorporated into a public numbered
release version, and the content of this file will be reset.


Updates since last public release
---------------------------------

Arrows - Core

 * Added a core implementation of "filter_tracks" which applies filters based
   on track length or based on importance of the track in covering a match matrix.

 * Added a core implementation of "filter_features" which filters features
   based on keypoint scale.

 * Changed "match_features_homography" to apply feature filtering to both the
   source and destination frames.  This seems to be more robust when the number
   of features is very large.  Also adjusted the homography inlier scale with
   respect to the average scale of the features.

 * Added multi-threaded operation to close_loops_keyframe and
   close_loops_exhaustive algorithms.  Frame matching tasks are added to the
   thread pool.

 * Added a video_input algorithm for image lists that treats a sequence of
   images files like a video, using an image_io algorithm to load each frame.

 * Added a video_input algorithm for POS files that produces a metadata-only
   stream out of POS files associated with a list of images.  Each image file
   name is matched to a POS file with the same basename in a specified metadata
   directory.

 * Added a video_input algorithm that splits imagery and metadata between two
   other video_input sources.  For example this implementation can combine the
   images from an image_list video_input and metadata from a POS video_input.

 * Added a video_input filter algorithm that reads data from another
   video_input instance and reduces the frame range or adjusts frame timing.

 * Updated hierarchical_bundle_adjust and initialize_cameras_landmarks to
   accept an optional metadata_map and pass it along to nested algorithms.

 * Generalized the track_features_core algorithm to handle tracking on frames
   that may come out of order and frames that have already been tracked.  Also
   removed the caching of the next frame id in the algorithm and now retrive it
   from the existing track set instead.  These changes are to support the
   MAP-Tk GUI which allows users to stop tracking, change the active frame,
   and start a new tracker.

 * Loop closure is now an optional component algorithm of the core feature
   tracker.  Leaving the loop closure algorithm unspecified will cause the
   tracker to skip loop closure.

 * Updated the core tracking algorithm to read and write features and
   descriptors to disk if a feature_descriptor_io algorithm is specified.

Vital

 * Added a "filter_tracks" abstract algorithm to apply filters to feature tracks

 * Added a singleton thread pool class in vital/utils to distribute tasks over
   a fixed number of threads.

 * Added new methods "read_pos_file" and "write_pos_file" in the video_metadata
   library to read AFRL POS files directly into a video_metadata structure and
   write POS files from a video_metadata structure.

 * Added new video_metadata tags corresponding to fields that are required for
   POS files.

 * Added a new metadata_map container to hold a mapping between frame number
   and video_metadata vectors.  This container is for passing all the metadata
   through the algorithm APIs.

 * Updated the APIs for various abtract algorithms to accept an optional
   metadata_map.  This includes initalize_cameras_landmarks, bundle_adjust,
   and optimize_cameras.

 * Added an "insert" member function to the track data structure to insert
   track states at any frame position, as long as that frame is not already
   occupied.

 * Added an optional video_metadata member to the image_container class so that
   metadata for images can be easily carried along with the image data.

 * Added a utility function to construct a base filename from a metadata packet
   and frame number in a consistent way for use in naming cache files
   associated with video frames.

Fixes since last public release
-------------------------------
