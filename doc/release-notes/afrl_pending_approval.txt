KWIVER Release Notes for changes pending release approval by AFRL
=================================================================

This file documents release notes for changes made to KWIVER which require
public release approval from AFRL.  After approval, the changes and
corresponding notes below will be incorporated into a public numbered
release version, and the content of this file will be reset.


Updates since last public release
---------------------------------

Arrows - Ceres

 * Added a Ceres implementation of the optimize_cameras abstract algorithm.
   This implmentation is very similar to the bundle_adjust algorithm but
   does not modify the landmarks.

 * Refactored common config options and helper functions between
   optimize_cameras and bundle_adjust into new shared classes in options.h.
   This makes it much easer to create a new Ceres solver algorihm and
   reuse the same solver options or camera options.

Arrows - Core

 * Added an option to the PCA canonical transform estimator to shift the ground
   plane vertically to place a configurable percentile of the landmarks above
   the ground.

 * Added logic to compute changes in ground sample distance (GSD) as images are
   added in the camera_landmark_initialization algorithm.  If GSD changes are
   above a threshold then assume the camera intrinsics have changed and create
   a new shared intrinsic model.  This allows for shared intrinsics when the
   camera does not zoom but varying intrinsics when zoom is detected.

Arrows - OpenCV

 * Updated the OpenCV image container functions to handle conversinos between
   vital::image and cv::Mat for all supported pixel types and memory layouts.

 * Updated the ocv::image_io algorithm to load images of various pixel types
   and to explicitly apply BGR to RGB conversions instead of hiding those
   color conversions elsewhere (see fixes below).

Arrows - VXL

 * Updated the VXL image container functions to handle conversions between
   vital::image and vil_image_view_base_sptr for all supported pixel types and
   memory layouts.

 * Generalized the vxl::image_io algorithm to read and write images with
   different pixel formats (bool, uint8, uint16, float, etc.).  Added a 
   "force_byte" option to always load or save as uint8 regardless of the
   underlying data type.  Generalized the range stretching options to apply
   to and from types other than uint8.  Range stretch now applies to save
   as well as load

Vital

 * Generalized the vital::image class to store pixel types other than bytes.
   A new image_pixel_traits struct is used to hold the number of bytes per pixel
   and an enum describing how to interpret the pixel (signed, unsigned, float,
   etc.).  A new derived class image_of<T> allows convenience construction and
   interface with images where pixel type T is known at compile time.

 * Added an is_contiguous() member function on vital::image to check if the
   data is laid out in contiguous memory.

 * Moved the transform_image function to vital/util/transform_image.h, a new
   header, and generalized it to use any pixel type.  Switched to a template
   argument for the function parameter to allow passing in functors.

 * Added a second transform_image function to transforms one image into another
   image, not in-place like the previous function.  This version can transform
   one image into another with a differnt pixel type.

 * Added a cast_image function which uses the transform_image function to
   apply a static cast between image types.

 * Expanded unit tests to evaluate different pixel data types and test the
   is_contiguous member function.

 * Added a vital::image_type_mismatch_exception to throw in cases where
   the pixel data type does not match what is expected.

 * Updated the C bindings for vital::image to support pixel types.  Added
   get_pixel2 and get_pixel3 variants for the most common data types.
   Added a bindings for is_contiguous and equal_content.

 * Updated the Python bindings for vital::image to support pixel types.
   Added bindings for get_pixel2 and get_pixel3 variants, is_contiguous,
   equal_content, and others.  Updated the conversion to PIL to work with
   different pixel types.


Fixes since last public release
-------------------------------

Arrows - OpenCV

 * Fixed a potential crash when wrapping a cv::Mat into a mat_image_memory
   object.  If the cv::Mat did not own its data and had no reference counter
   the mat_image_memory would still try to increment it (OpenCV 2.4.X only).

 * Reverted a previous workaround to the OpenCV BGR vs RGB issue that was
   reversing the color channels during every cv::Mat to vital::image conversion
   This was error prone and missed some corner cases.  The conversion will
   be made explictly elsewhere when needed.

Vital

 * The C binding vital_image_new_from_data contained a weird hack that
   convert BGR to RGB and copied data instead of simply calling the
   corresponding C++ code.  This has been removed.  Another solution
   should be found if this causes problems elsewhere.
