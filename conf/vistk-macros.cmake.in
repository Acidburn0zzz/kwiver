function (add_vistk_plugin name define)
  add_library(${name} SHARED
    ${ARGN})

  # TODO: The usage of CMAKE_BINARY_DIR needs to be fixed.
  set_target_properties(${name}
    PROPERTIES
      DEFINE_SYMBOL            ${define}
      LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/vistk"
      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/vistk"
      PREFIX                   "")

  install(
    TARGETS       ${name}
    LIBRARY
      DESTINATION "lib${LIB_SUFFIX}/vistk"
    RUNTIME
      DESTINATION bin
    COMPONENT     runtime)
endfunction (add_vistk_plugin name define)

if (VISTK_ENABLE_PYTHON)
  function (add_vistk_python_library name modpath)
    string(REPLACE "/" "." safe_modpath ${modpath})

    add_library(python-${safe_modpath}-${name}
      ${ARGN})

    if (WIN32)
      set(module_output RUNTIME_OUTPUT_DIRECTORY)
    else (WIN32)
      set(module_output LIBRARY_OUTPUT_DIRECTORY)
    endif (WIN32)

    set_target_properties(python-${safe_modpath}-${name}
      PROPERTIES
        OUTPUT_NAME      ${name}
        ${module_output} "${PYTHON_OUTPUT_PATH}/${modpath}"
        PREFIX           "")

    if (WIN32)
      set_target_properties(python-${safe_modpath}-${name}
        PROPERTIES
          SUFFIX ".pyd")
    endif (WIN32)

    foreach (config ${CMAKE_CONFIGURATION_TYPES})
      if (WIN32)
        set(output_path "${PYTHON_OUTPUT_PATH}/${config}")
      endif (WIN32)

      string(TOUPPER "${config}" upper_config)

      set_target_properties(python-${safe_modpath}-${name}
        PROPERTIES
          "${module_output}_${upper_config}" "${output_path}/${modpath}")
    endforeach (config)

    if (NOT ${no_install_plugin})
      install(
        TARGETS     python-${safe_modpath}-${name}
        DESTINATION "${PYTHON_INSTALL_PATH}/${modpath}"
        COMPONENT   runtime)
    endif (NOT ${no_install_plugin})
  endfunction (add_vistk_python_library name modpath)

  function (_add_python_module path modpath module)
    string(REPLACE "/" "." safe_modpath ${modpath})

    set(python_sitepath)

    if (python_noarch)
      set(python_sitepath /site-packages)
    endif (python_noarch)

    set(output_module_path
      "${PYTHON_OUTPUT_PATH}${sitepath}/${modpath}/${module}.py")

    configure_file(
      "${path}"
      "${output_module_path}"
      @ONLY)
    set_directory_properties(PROPERTIES
      ADDITIONAL_MAKE_CLEAN_FILES "${output_module_path}")

    foreach (config ${CMAKE_CONFIGURATION_TYPES})
      if (WIN32)
        set(output_path "${PYTHON_OUTPUT_PATH}/${config}")
      endif (WIN32)

      string(TOUPPER "${config}" upper_config)

      set(output_module_path
        "${output_path}${sitepath}/${modpath}/${module}.py")

      configure_file(
        "${path}"
        "${output_module_path}"
        @ONLY)
      set_directory_properties(PROPERTIES
        ADDITIONAL_MAKE_CLEAN_FILES "${output_module_path}")
    endforeach (config)

    if (NOT ${suppress_install})
      install(
        FILES       "${PYTHON_OUTPUT_PATH}${sitepath}/${modpath}/${module}.py"
        DESTINATION "${PYTHON_INSTALL_PATH}${python_sitepath}/${modpath}"
        COMPONENT   runtime)
    endif (NOT ${suppress_install})
  endfunction (_add_python_module path modpath module)

  function (add_python_module path modpath module)
    _add_python_module("${CMAKE_CURRENT_SOURCE_DIR}/${path}"
      ${modpath}
      ${module})
  endfunction (add_python_module path modpath module)

  function (make_python_init_file modpath)
    string(REPLACE "/" "." safe_modpath ${modpath})

    set(init_template "${CMAKE_CURRENT_BINARY_DIR}/${safe_modpath}.__init__.py")

    file(WRITE "${init_template}"
      "${copyright_header}\n\n")

    foreach (module ${ARGN})
      file(APPEND "${init_template}"
        "from ${module} import *\n")
    endforeach (module)

    _add_python_module("${init_template}"
      ${modpath}
      __init__)
  endfunction (make_python_init_file modpath)

  function (make_python_plugin_init_file modpath)
    string(REPLACE "/" "." safe_modpath ${modpath})

    set(init_template "${CMAKE_CURRENT_BINARY_DIR}/${safe_modpath}.__init__.py")

    file(WRITE "${init_template}"
      "${copyright_header}\n\n")
    file(APPEND "${init_template}"
      "from pkgutil import extend_path\n")
    file(APPEND "${init_template}"
      "__path__ = extend_path(__path__, __name__)\n")

    _add_python_module("${init_template}"
      ${modpath}
      __init__)
  endfunction (make_python_plugin_init_file modpath)
endif (VISTK_ENABLE_PYTHON)
