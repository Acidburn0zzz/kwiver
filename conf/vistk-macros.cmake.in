# Macros to assist with creation of vistk plugins.
# The following functions are defined:
#   add_vistk_plugin
# If Python support is enabled in vistk, the following functions are available:
#   add_vistk_python_library
#   _add_python_module
#   add_python_module
#   make_python_init_file
#   make_python_plugin_init_file
# Their syntax is:
#   add_vistk_plugin(name define [source ...])
#     Creates a vistk plugin and installs it to the proper location.
#   _add_python_module(path modpath module)
#     Creates a python module by configuring the given path into the correct
#     directory given the modpath and the module's name (e.g., a module meant to
#     be available as foo.bar.baz would have foo/bar as the modpath and baz as
#     the module name).
#   add_python_module(path modpath module)
#     A wrapper around _add_python_module which takes a relative path.
#   make_python_init_file(modpath [module ...])
#     Create an __init__ module to make modpath into a Python package. Any
#     package modules which are meant to be automatically imported may be given
#     as remaining arguments.
#   make_python_plugin_init_file(modpath)
#     Create an __init__ module compatible with being an additional
#     VISTK_PYTHON_MODULES value.
#
# Values expected to be set for functions include:
#   copyright_header: A copyright header to put at the top of generated Python
#     scripts.
#   PYTHON_OUTPUT_PATH: An absolute path to output Python modules under.
#   python_noarch: If truthy, Python modules will be installed to the
#     architecture-independent directory. All modules are put into one namespace
#     in the build directory.

function (add_vistk_plugin name define)
  add_library(${name} SHARED
    ${ARGN})

  # TODO: The usage of CMAKE_BINARY_DIR needs to be fixed.
  set_target_properties(${name}
    PROPERTIES
      DEFINE_SYMBOL            ${define}
      LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/vistk"
      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/vistk"
      PREFIX                   "")

  install(
    TARGETS       ${name}
    LIBRARY
      DESTINATION "lib${LIB_SUFFIX}/vistk"
    RUNTIME
      DESTINATION bin
    COMPONENT     runtime)
endfunction ()

if (VISTK_ENABLE_PYTHON)
  function (add_vistk_python_library name modpath)
    string(REPLACE "/" "." safe_modpath ${modpath})

    add_library(python-${safe_modpath}-${name} SHARED
      ${ARGN})

    set_target_properties(python-${safe_modpath}-${name}
      PROPERTIES
        OUTPUT_NAME              ${name}
        RUNTIME_OUTPUT_DIRECTORY "${PYTHON_OUTPUT_PATH}/${modpath}"
        LIBRARY_OUTPUT_DIRECTORY "${PYTHON_OUTPUT_PATH}/${modpath}"
        PREFIX                   "")

    if (WIN32)
      set_target_properties(python-${safe_modpath}-${name}
        PROPERTIES
          SUFFIX ".pyd")
    endif ()

    foreach (config ${CMAKE_CONFIGURATION_TYPES})
      if (CMAKE_CONFIGURATION_TYPES)
        set(output_path "${PYTHON_OUTPUT_PATH}/${config}")
      endif ()

      string(TOUPPER "${config}" upper_config)

      set_target_properties(python-${safe_modpath}-${name}
        PROPERTIES
          "${module_output}_${upper_config}" "${output_path}/${modpath}")
    endforeach ()

    if (NOT ${no_install_plugin})
      install(
        TARGETS     python-${safe_modpath}-${name}
        DESTINATION "${PYTHON_INSTALL_PATH}/${modpath}"
        COMPONENT   runtime)
    endif ()
  endfunction ()

  function (_add_python_module path modpath module)
    string(REPLACE "/" "." safe_modpath ${modpath})

    set(python_sitepath)

    if (python_noarch)
      set(python_sitepath /site-packages)
    endif ()

    set(output_module_path
      "${PYTHON_OUTPUT_PATH}${sitepath}/${modpath}/${module}.py")

    configure_file(
      "${path}"
      "${output_module_path}"
      @ONLY)
    set_directory_properties(PROPERTIES
      ADDITIONAL_MAKE_CLEAN_FILES "${output_module_path}")

    foreach (config ${CMAKE_CONFIGURATION_TYPES})
      if (CMAKE_CONFIGURATION_TYPES)
        set(output_path "${PYTHON_OUTPUT_PATH}/${config}")
      endif ()

      string(TOUPPER "${config}" upper_config)

      set(output_module_path
        "${output_path}${sitepath}/${modpath}/${module}.py")

      configure_file(
        "${path}"
        "${output_module_path}"
        @ONLY)
      set_directory_properties(PROPERTIES
        ADDITIONAL_MAKE_CLEAN_FILES "${output_module_path}")
    endforeach ()

    if (NOT ${suppress_install})
      install(
        FILES       "${PYTHON_OUTPUT_PATH}${sitepath}/${modpath}/${module}.py"
        DESTINATION "${PYTHON_INSTALL_PATH}${python_sitepath}/${modpath}"
        COMPONENT   runtime)
    endif ()
  endfunction ()

  function (add_python_module path modpath module)
    _add_python_module("${CMAKE_CURRENT_SOURCE_DIR}/${path}"
      ${modpath}
      ${module})
  endfunction ()

  function (make_python_init_file modpath)
    string(REPLACE "/" "." safe_modpath ${modpath})

    set(init_template "${CMAKE_CURRENT_BINARY_DIR}/${safe_modpath}.__init__.py")

    file(WRITE "${init_template}"
      "${copyright_header}\n\n")

    foreach (module ${ARGN})
      file(APPEND "${init_template}"
        "from ${module} import *\n")
    endforeach ()

    _add_python_module("${init_template}"
      ${modpath}
      __init__)
  endfunction ()

  function (make_python_plugin_init_file modpath)
    string(REPLACE "/" "." safe_modpath ${modpath})

    set(init_template "${CMAKE_CURRENT_BINARY_DIR}/${safe_modpath}.__init__.py")

    file(WRITE "${init_template}"
      "${copyright_header}\n\n")
    file(APPEND "${init_template}"
      "from pkgutil import extend_path\n")
    file(APPEND "${init_template}"
      "__path__ = extend_path(__path__, __name__)\n")

    _add_python_module("${init_template}"
      ${modpath}
      __init__)
  endfunction ()
endif ()
